{"version":3,"sources":["CoinFlipDemo.js","RollDiceDemo.js","App.js","serviceWorker.js","index.js"],"names":["CoinFlipDemo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","setState","error","loading","result","fetch","then","response","json","processNumber","catch","processError","number","message","state","resultImageUrl","concat","errorMessage","react_default","a","createElement","className","src","onClick","Component","RollDiceDemo","processNumbers","numbers","map","x","Math","abs","diceImages","diceUrls","App","src_CoinFlipDemo_0","src_RollDiceDemo_0","href","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.65ee2f6e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './CoinFlipDemo.css';\n\nclass CoinFlipDemo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      result: null,\n      error: null\n    };\n    \n    this.handleClick();\n  }\n\n  handleClick = () => {\n    this.setState({ \n      error: null,\n      loading: true,\n      result: null \n    });\n    fetch(\"https://entropysector.com/hwrng/api/v1/public/numbers/1\")\n      .then(response => response.json())\n      .then(result => this.processNumber(result[\"data\"][0]))\n      .catch(error => this.processError(error));\n  }\n\n  processNumber = (number) => {\n    const positiveNumber = number + 2147483648;\n    const heads = (positiveNumber % 2 == 1);\n    const result = heads ? \"heads\" : \"tails\";\n    this.setState({ \n      error: null,\n      loading: false,\n      result: result \n    });\n  }\n\n  processError = (error) => {\n    this.setState({ \n      error: error.message, \n      loading: false \n    });\n  }\n\n  render() {\n    var resultImageUrl = this.state.result ? `images/quarter-${this.state.result}.png` : null;\n    var errorMessage = this.state.error;\n\n    return (\n      <div className=\"CoinFlipDemo\">\n        <h2>Coin Flip</h2>\n        <div className=\"Result\">\n          {resultImageUrl ? <img src={resultImageUrl}/> : null}\n        </div>\n\n        <button onClick={this.handleClick} className=\"FlipCoinButton\">\n          {this.state.loading ? \"Loading...\" : \"Flip Coin\"}\n        </button>\n\n        {errorMessage ? <p className=\"Error\">{errorMessage}</p> : null}\n      </div>\n    );\n  }\n}\n\nexport default CoinFlipDemo;\n","import React, { Component } from 'react';\nimport './RollDiceDemo.css';\n\nclass RollDiceDemo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      result: null,\n      error: null\n    };\n\n    this.handleClick();\n  }\n\n  handleClick = () => {\n    this.setState({ \n      error: null,\n      loading: true,\n      result: null \n    });\n    fetch(\"https://entropysector.com/hwrng/api/v1/public/numbers/3\")\n      .then(response => response.json())\n      .then(result => this.processNumbers(result[\"data\"]))\n      .catch(error => this.processError(error));\n  }\n\n  processNumbers = (numbers) => {\n    const result = numbers\n      .map(x => x + 2147483648)\n      .map(x => (x % 6))\n      .map(x => Math.abs(x))\n      .map(x => x + 1); // 1 to 6\n\n    this.setState({ \n      error: null,\n      loading: false,\n      result: result \n    });\n  }\n\n  processError = (error) => {\n    this.setState({ \n      error: error.message, \n      loading: false \n    });\n  }\n\n  render() {\n    var numbers = this.state.result;\n    var errorMessage = this.state.error;\n\n    var diceImages = null;\n    if (numbers) {\n      var diceUrls = numbers.map(x => `images/6die-${x}.png`);\n\n      diceImages = (\n        <div className=\"Result\">\n          <img src={diceUrls[0]} />\n          <img src={diceUrls[1]} />\n          <img src={diceUrls[2]} />\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"RollDiceDemo\">\n        <h2>Dice Roll</h2>\n\n        <div className=\"Result\">\n          {diceImages}\n        </div>\n\n        <button onClick={this.handleClick} className=\"FlipCoinButton\">\n          {this.state.loading ? \"Loading...\" : \"Roll Dice\"}\n        </button>\n\n        {errorMessage ? <p className=\"Error\">{errorMessage}</p> : null}\n      </div>\n    );\n  }\n}\n\nexport default RollDiceDemo;\n","import React, { Component } from 'react';\nimport './App.css';\nimport CoinFlipDemo from './CoinFlipDemo';\nimport RollDiceDemo from './RollDiceDemo';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      result: null,\n      error: null\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Entropy Sector Demos</h1>\n        <CoinFlipDemo />\n        <RollDiceDemo />\n        <p>Powered by <a href=\"https://tectrolabs.com/swiftrng/\">SwiftRNG</a></p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}